---
layout: blog-post
title: Setting up single sign on for nodebb 
description: Using OIDC, we'll set up single sign on for nodebb.
author: Dan Moore
image: blogs/dot-net-command-line-client/creating-user-cli-client.png
category: blog
excerpt_separator: "<!--more-->"
---

nodebb is a modern supported forum software package that has many plugins and a great user experience. In this post, we'll show you how to set up single sign on (SSO) for your nodebb forum.

<!--more-->

Here's a scenario. You build out an application, perhaps a todo app. It grows wildly popular, with users adding tasks and checking them off with abandon. Your users clamor for a place to share all their task management tips. 

Enter nodebb. You download and install the application. It works great! Then you notice that every one of your users will have to sign up for another account. Boo. 

Luckily, you planned ahead and used an user identity management system with OpenID Connect (OIDC) support. You realize you can set up nodebb to use this existing system. All your todo app users will then be able to log in and chat about your todo app and their tasks with the same username and password they use to login to your app. Ah, the glory of single sign on.

## Prerequisites

Before you start, you need a working nodebb server ([instructions here](https://docs.nodebb.org/installing/os/)) including a database--I used mongodb. You'll need administrative access on the nodebb application because you'll be installing a plugin.

You'll also need an OIDC compliant user identity server. In this post, I'll be using FusionAuth as my identity provider ([here's the five minute setup guide](https://fusionauth.io/docs/v1/tech/5-minute-setup-guide)), but the nodebb configuration will be the same with any OIDC server. FusionAuth will live at `http://local.fusionauth.io`.

(Wait, what if you aren't using an OIDC compliant identity management system? FusionAuth is free for unlimited users; here's [migration instructions](https://fusionauth.io/docs/v1/tech/tutorials/migrate-users).)

## Setting up the OIDC server

First, create an application in FusionAuth. I'm going to call mine, creatively, "nodebb". We'll need to record a couple of configuration variables.

The client id and client secret are tied to the FusionAuth application. These look like ... and ... . Make sure you save them off to a text file, as you'll use them later.

We also need to set up a redirect URL. This will look like `https://HOSTNAME/auth/fusionauth-oidc/callback` where `HOSTNAME` is the location of your nodebb server. For me, this is `http://localhost:4567/auth/fusionauth-oidc/callback` because I'm installing nodebb locally.

Set up a logout redirect URL so that when a user logs out, they are sent back to the nodebb screen. I set mine to `http://localhost:4567/`

This is what it should look like when you've set up your FusionAuth application.

TBD image with application set up

We may want to enable self registration. This will allow someone who isn't a todo app user to sign up for the forum. There they can ask their task management questions; hopefully the community will be welcoming and enthusiastic enough that they'll sign up for your todo app.

TBD self registration image

Finally, we'll want to add an admin role for this application. Associating this role with a user or a group is how they'll have access to the admin functionality of nodebb.

TBD adding admin role.

Next, let's create a user. If this weren't a walkthrough, you'd have a user in your existing identity management system, but I'm not going to build your entire todo app for you!

Go to "Users" and add a user--I'm going to add "fornodebb@example.com". Then associate them with the nodebb application by creating a registration. When you're done, it should look like this:

TBD image with user

Note that each user must have an email address associated with them. Usernames won't work because nodebb expects an email.XXX

Phew. We're all done with setting up our FusionAuth OIDC server. One final reminder that all these instructions are FusionAuth specific but your user identity amanagement service of choice should have analogous configuration.

Now, let's set up nodebb. 

## Configuring nodebb for SSO

First login as an admin and install the [fusionauth-oidc plugin](https://github.com/FusionAuth/nodebb-plugin-fusionauth-oidc). Again, even though the name says FusionAuth, that's just because we maintain it. (It's a BSD license.) It should work with any OIDC compatible identity management server.

I had to rebuild and restart the nodebb server when I installed the plugin.

The [install and configuration instructions](https://github.com/FusionAuth/nodebb-plugin-fusionauth-oidc) on the GitHub project are good, so I'm not going to walk you through each step. 

I will say that you need to:
* set the client secret and id to the values you saw on the FusionAuth application screen.
* set the discovery URL to the FusionAuth location: http://local.fusionauth.io is what I used
* set the name of the "Roles claim" to "roles"

Just head over there and come back when you're done.

The next question is, should you [turn off local login and registration](https://github.com/FusionAuth/nodebb-plugin-fusionauth-oidc#additional-configuration). 

It depends on your use case. If you have existing users in your forum, you might want to allow them to continue to use the username and password they are familiar with. But if you're starting with a fresh installation, as outlined above, I can't think of any reason to leave local login or registration enabled. In either case, you should turn off local registration.

If you do leave local login turned on, your users will see both options when the click the 'login' link.

TBD two logins link

If on the other hand you disallow local logins, you are directed right to the SSO server page.

TBD one logins link

Either way, let's login using the "fornodebb@example.com" user using the SSO server link. You should now see a normal nodebb homepage where they can interact with the others on the forum.

Note that if you turn off local registration, that doesn't mean that people can't modify their profile. They absolutely can.

TBD image of registration with fornodebb

Basically the username and password information are kept in the identity server, and everything else is stored in nodebb.

## User management

If you lock the user account within the SSO server, they won't be able to login.

TBD image of lcoked account

You can unlock them later. 

Additionally, because we configured the "Roles claim" in the plugin, we can have administrative users managed via the SSO server as well. Just assign the "admin" role in the SSO server and that user will then be able to view the admin screens.

TBD assigning admin role

## Themes

You may want to style your login and logout screens to look more like nodebb. This section is more FusionAuth specific so feel free to skip if you are using another SSO server.

To do so, you have to modify your theme in the administrative user interface ([full docs for FusionAuth](https://fusionauth.io/docs/v1/tech/themes/) here). 

Updated header, Login and logout, rest left as an exercise for the reader. Hint is that you should save these off and version control them.

Text files

TBD show image of login when looks good

## Conclusion

nodebb is a powerful forum. If you want to add a community aspect to your application, you can allow users to post on the forum. Using an SSO server such as FusionAuth will allow your users to hvae the same username and password as they do for your main application. This centralized user management will make both your life and your users' lives easier.





what if we want people to regiser? 
- would expect your app to have it, but if using Fa, you coudl turn on registration for the application
- theme (tenant)

advanced
- admin privs
- federate with google?


marketing
post with single sign on

don't use OIDC, use SSO
