---
layout: blog-post
title: 
description: Authenticate using OAuth and ASP.NET Core
author: Dan Moore
image: blogs/whats-new-in-oauth-2-1/whats-new-with-oauth-2-1.png
category: blog
excerpt_separator: "<!--more-->"
---

Previously, we used .NET Core to build a command line tool to add users to a FusionAuth instance. In this tutorial, we'll build out a small web application which will have a protected page. We'll use Razor Pages and implement both login and logout actions.

<!--more-->

## Configuring FusionAuth

You should already have FusionAuth up and running. If you don't, head over to [Creating a user in FusionAuth with a .NET Core CLI Client]() and download and install FusionAuth. You'll also need to create the application. If you want to skip building the CLI client, you can just create a user in the UI.

We are going to make a few changes to the configuration to allow the web application to work. 

First, we're going to create a new signing key. There's a list of [supported algorithms](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/wiki/Supported-Algorithms) that work with the Identity Model project we're using, but I found after some experimentation that creating an RSA key worked best. (Using the default HMAC key resulted in an `SecurityTokenSignatureKeyNotFoundException` that I was unable to resolve.) XXX weak

To do so, go to "Settings" then to "Key Master". In the upper right hand corner, click on the dropdown next to "Import Public Key" and choose "Generate RSA". Use a descriptive name like "For dotnetcore" and leave the rest of defaults alone and click "Submit".

Next, we'll be modifying the 'dotnetcore' application, so go ahead and edit that.  Then go to the OAuth tab. Add an 'Authorized Redirect URL' of `http://localhost:5000/signin-oidc`. Then add a Logout URL of `http://localhost:5000`. The web application we are going to build is going to live there, so we're setting things up so that the Authorization Code grant knows where to send users. 

When you are done, the OAuth tab should look like this:

TBD aspdotnet-oauth-screen.png

Next, go to the JWT tab.

We want to enable it. 

Change the "Access token signing key" and "Id token signing key" to the previously created key. You can leave rest of the defaults alone. When you are done, the JWT tab should look like this:

Click the blue 'save' icon. We're done configuring FusionAuth.


with razor pages

* fusionauth should already be configured. point back to prev post.
make a few changes
jwts
generate cert with correct values pic
SecurityTokenSignatureKeyNotFoundException/ certain algos

* create a new ASP.NET Core webapp.
branch setup-application

dotnet new webapp -o SampleApp
cd SampleApp

 dotnet publish -r win-x64

https://docs.microsoft.com/en-us/dotnet/core/deploying/

publish and run
 bin/Debug/netcoreapp3.1/win-x64/publish/SampleApp.exe

* disable https


* add a separate, secure page
* configure login stuff
make sure to update yoru appsettings.json
* show that it works (use newuser2@example.com)

logout
2nd post

Add in 
* the lambda to get favorite color
* and pkce

References

https://github.com/IdentityModel/IdentityModel.AspNetCore
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/wiki/Supported-Algorithms
https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.logging.identitymodeleventsource?view=azure-dotnet
https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/wiki/PII

https://docs.microsoft.com/en-us/aspnet/core/fundamentals/?view=aspnetcore-3.1&tabs=linux
