=== Cookies for a Single Page Application

We can also store the `access_token` from FusionAuth as a cookie if your application would rather push the state to the browser (more on that below). 


If you prefer to use cookies rather than server-side sessions, you can modify the code for your `oauth-redirect` route from this:

[source,javascript,title=Node.js Route Using Sessions for Token Storage]
----
//...
include::https://raw.githubusercontent.com/FusionAuth/fusionauth-example-node/master/routes/index.js[tags=setUserInSession]
//...
----

to this:

[source,javascript,title=Node.js Route With Cookie Token Storage]
----
  })
  .then((response) => {
    res.cookie('access_token', response.response.access_token, {httpOnly: true});
    res.cookie('refresh_token', response.response.refresh_token, {httpOnly: true});
    res.redirect(302, '/');
  }).catch((err) => {console.log("in error"); console.error(JSON.stringify(err));});
----

This approach works well if you are building a single-page application (SPA) or any other type of application where cookies are preferred to server-side sessions.

== Review The Login and Logout Code

TODO login
Here's how your Pug template, which lives in `views/index.pug`, looks:

[source,pug,title=Pug Template]
----
extends layout

block content
  h1= title
  if user
    p Hello #{user.firstName}
  else
    a(href='http://localhost:9011/oauth2/authorize?client_id='+clientId+'&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Foauth-redirect&scope=offline_access&state='+stateValue+'&code_challenge='+challenge+'&code_challenge_method=S256') Login

  p Welcome to #{title}
----

TODO logout

== Feedback 

FusionAuth is beginning to work on a ten minute guide and a 42 minute guide. What topics would you want to learn next? Please choose two at most.

++++
<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSfY0w3qAAkjdyeXIsZyyxZ4EJxrMQ-DmVkc9t4KfJDLZcDeNg/viewform?embedded=true" width="640" height="1076" frameborder="0" marginheight="0" marginwidth="0">Loadingâ€¦</iframe>
++++

== Next Steps

From here, you can begin creating a registration page in your application or using FusionAuth's registration tool. You can also start working with FusionAuth Themes to make the login pages look like your brand. If you want to use FusionAuth's forgot password system, you will need to configure an SMTP server. Here are some links to additional documents that will help you continue your integration with FusionAuth.

* link:/docs/v1/tech/core-concepts/[Core Concepts]
* link:/docs/v1/tech/lambdas/jwt-populate[Customizing users' JWTs]
* link:/docs/v1/tech/email-templates[Sending and customizing emails]
* link:/docs/v1/tech/identity-providers/[Logging in with OIDC, SAML and social login providers]
* link:/docs/v1/tech/themes/[Making the FusionAuth pages look like your application with themes]
* link:/docs/v1/tech/guides/multi-factor-authentication[MFA/Two-Factor]
* link:/docs/v1/tech/oauth/[OAuth documentation]
* link:/docs/v1/tech/apis/registrations[Registration API]
* link:/docs/v1/tech/guides/basic-registration-forms[Self-service registration]
* link:/docs/v1/tech/guides/single-sign-on[Single Sign-on/SSO]
* link:/docs/v1/tech/tutorials/[Tutorials in other programming languages]
* link:/docs/v1/tech/apis/users[User API]
